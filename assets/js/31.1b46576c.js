(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{386:function(s,t,a){},443:function(s,t,a){"use strict";a(386)},518:function(s,t,a){"use strict";a.r(t);a(443);var n=a(33),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h3",{attrs:{id:"_2022-02-18-새로-알게된-점"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2022-02-18-새로-알게된-점"}},[s._v("#")]),s._v(" 2022/02/18, 새로 알게된 점")]),s._v(" "),a("p",{staticClass:"tags"},[s._v("#docker #mlflow")]),s._v(" "),a("p",[s._v("  16일날 백신 3차 접종 후 팔에 통증과 두통이 생겨 17일까지 내리 잤다. 그래서 학습 기록을 못했는데, 오늘은\n팀원들과 같이 스페셜 미션을 해결해보고 이야기해보는 시간을 가졌다. 그곳에서 내가 발표한 것은 Docker 를 통해\nMLflow 를 사용해보는 것이었다.")]),s._v(" "),a("br"),s._v(" "),a("img",{attrs:{src:"https://raw.githubusercontent.com/BlueYellowGreen/BlueYellowGreen.github.io/main/.vuepress/public/assets/img/mlflow.png"}}),s._v(" "),a("p",[s._v("  협업을 위해서는, Cloud 상에 데이터 (Metric, Params, ... & Model, Data)를 저장하고, MLflow 를 통해 모니터링하는\n방식으로 진행해야 한다. 하지만 당장 클라우드의 Storage 서비스를 이용하기에는 부담이 있으므로, 로컬에서 진행하되\n"),a("span",{staticStyle:{color:"#2454ff"}},[a("strong",[s._v("로컬 저장소")])]),s._v("를 Docker Container 에 "),a("span",{staticStyle:{color:"#2454ff"}},[a("strong",[s._v("마운트")])]),s._v("할 것이고,\nDocker 에서 웹서버를 열어 로컬에서 확인하는 방식을 진행할 것이다."),a("br"),s._v("\n(Window & WSL2 기준으로 진행)")]),s._v(" "),a("br"),s._v(" "),a("div",{staticClass:"language-dockerfile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" python:3.8.7-slim-buster")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WORKDIR")]),s._v(" app/")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENV")]),s._v(" PYTHONPATH=/app")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENV")]),s._v(" PYTHONBUFFERED=1")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" pip install pip==21.2.4 && "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),s._v("\n    pip install mlflow")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token instruction"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CMD")]),s._v(" ["),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"mlflow"')]),s._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ui"')]),s._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"--host"')]),s._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"0.0.0.0"')]),s._v("]")]),s._v("\n")])])]),a("p",[s._v("위와 같이 "),a("span",{staticStyle:{color:"#2454ff"}},[a("strong",[s._v("Dockerfile")])]),s._v(" 을 작성한다.\n여러 방식이 있겠지만, 단순하게 python slim 버전의 이미지를 가지고 와서 mlflow 를 설치한 뒤,\n"),a("code",[s._v("mlflow ui")]),s._v(" 를 통해 웹서버를 연다. 여기서 주의해야 하는 점은, Dokcer Container 에서 웹서버를 열기 때문에,\n외부에서 접속할 수 있도록 ip 를 허용해야 한다. 이는 "),a("code",[s._v("--host “0.0.0.0”")]),s._v(" 태그를 통해 가능하다.")]),s._v(" "),a("br"),s._v(" "),a("p",[s._v("그런 다음, WSL2 Ubuntu 속 해당 Dockerfile 이 있는 경로에서 app 폴더를 만든 뒤, 다음의 명령어로 빌드한다.")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("docker build -t 이미지_이름\n")])])]),a("p",[s._v("이미지_이름 부분에 원하는 이름을 적고, 버전을 명시하려면 이미지_이름:0.1 처럼 작성한다. "),a("strong",[s._v("버전을 명시하지 않으면\n최신버전으로 인식")]),s._v("된다.")]),s._v(" "),a("br"),s._v(" "),a("p",[s._v("  이미지가 성공적으로 생성되었으면, docker images 에서 이미지_이름 으로 생성된 것을 확인할 수 있다.\n그 다음으로 컨테이너를 생성 및 실행 (RUN) 하면 되지만, 그 전에 로컬에서 작업해야 할 사항이 있다.")]),s._v(" "),a("p",[s._v("  현재 목표는, 로컬(윈도우)에서 "),a("strong",[s._v("편하게 작업")]),s._v(" (PyTorch 를 사용하고, MLflow 로 train.py 실행 등) 하기 위함이다.\n따라서 "),a("strong",[s._v("로컬")]),s._v("에서 원하는 아무곳에 "),a("strong",[s._v("폴더를 생성")]),s._v("하고 "),a("strong",[s._v("가상환경 설정")]),s._v("한다.\n그런 다음 다음의 명령어를 통해 "),a("strong",[s._v("실험을 생성")]),s._v("한다.")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("mlflow experiments create --experiment-name 실험_이름\n")])])]),a("p",[s._v("그러면 해당 경로에 mlruns 라는 폴더가 생긴다. 이러면 당장 필요한 것은 끝났다. 물론 해당 실험 하위로 각종\nmlflow run 하기 위해서는 해당 실험 폴더마다 MLProject 란 파일을 생성해야 하지만, 마지막에 다룬다.\nWindow Terminals 같은 App 을 통해 Ubuntu 터미널을 열고, 로컬 경로로 접근한다.")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" /mnt/c/Users/유저이름/"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("./폴더를_생성한_곳\n")])])]),a("p",[s._v("해당 경로에서 다음의 명령어로 컨테이너를 생성 및 실행한다.")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("docker run -d -p "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5000")]),s._v(":5000 -v "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("pwd")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v(":/app 이미지_이름\n")])])]),a("p",[s._v("현재 로컬 폴더를 docker container 의 저장소로 마운트 함으로써, 컨테이너를 삭제해도 데이터는 날라가지 않으며,\n로컬(윈도우)에서 편하게 작업하고 이를 바로 "),a("code",[s._v("http://localhost:5000")]),s._v(" 에서 확인할 수 있다. 참고로 mlflow 로 run\n하는 명령어는 다음과 같다.")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("mlflow run 실행하고자_하는_폴더_이름 --experiment-name 실험_이름 --no-conda\n")])])]),a("p",[s._v("하나의 Run 은 이제 웹에서 확인할 수 있다!"),a("br"),s._v("\n그리고 아까 언급했듯이, 하나의 run 을 위해 해당 경로에 "),a("span",{staticStyle:{color:"#2454ff"}},[a("strong",[s._v("MLProject")])]),s._v(" 파일이 있어야 한다.\n가장 기본적인 구조는 다음과 같다.")]),s._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('name: tutorial\n\nentry_points:\n    main:\n        command: "python train.py"\n')])])]),a("p",[s._v("해당 파일이 run 마다 있어야 한다!")]),s._v(" "),a("br"),s._v(" "),a("br")])}),[],!1,null,"ce35a002",null);t.default=e.exports}}]);