(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{401:function(_,v,e){},458:function(_,v,e){"use strict";e(401)},482:function(_,v,e){"use strict";e.r(v);e(458);var t=e(33),o=Object(t.a)({},(function(){var _=this,v=_.$createElement,e=_._self._c||v;return e("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[e("h3",{attrs:{id:"_2022-02-14-새로-알게된-점"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2022-02-14-새로-알게된-점"}},[_._v("#")]),_._v(" 2022/02/14, 새로 알게된 점")]),_._v(" "),e("p",{staticClass:"tags"},[_._v("#machine_learning_project_flow #linux #shell_command #docker")]),_._v(" "),e("p",[_._v("  이번 주는 AI Product Serving 기초에 관하여 학습한다."),e("br"),_._v("\n다루는 범위는 MLOps 개론부터 각종 개발 지식 전반을 보게되는데, 구체적인 키워드로는 다음과 같다.")]),_._v(" "),e("ul",[e("li",[_._v("Prototype ( Voila, Steamlit )")]),_._v(" "),e("li",[_._v("Linux")]),_._v(" "),e("li",[_._v("Cloud")]),_._v(" "),e("li",[_._v("CI/CD")]),_._v(" "),e("li",[_._v("Docker")]),_._v(" "),e("li",[_._v("Logging")]),_._v(" "),e("li",[_._v("MLflow")]),_._v(" "),e("li",[_._v("BentoML")]),_._v(" "),e("li",[_._v("Airflow")]),_._v(" "),e("li",[_._v("머신러닝 디자인 아키텍쳐")])]),_._v(" "),e("p",[_._v("많은 것들을 빠르게 배우지만, 언급한 것들 (ex. 라이브러리 등) 에 종속되지 말고, 왜 이러한 것들이 만들어졌는지 "),e("strong",[_._v("이해")]),_._v("할 수 있어야 한다 (추후에 다른 것을 사용할 수 있다).")]),_._v(" "),e("br"),_._v(" "),e("h4",{attrs:{id:"머신러닝-프로젝트-flow"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#머신러닝-프로젝트-flow"}},[_._v("#")]),_._v(" 머신러닝 프로젝트 Flow")]),_._v(" "),e("ul",[e("li",[e("strong",[_._v("문제 정의의 중요성")]),_._v("    ➜   특정 현상을 파악하고 그 현상에 있는 "),e("strong",[_._v("문제를 정의")]),_._v("하는 과정\n"),e("ul",[e("li",[_._v("문제 정의( 본질을 파악하는 과정 )가 명확하지 않으면, 무엇을 해야할지 결정하기 어려워진다.")])])])]),_._v(" "),e("p",[_._v("머신러닝 프로젝트의 흐름은 다음과 같다.")]),_._v(" "),e("br"),_._v(" "),e("ol",[e("li",[e("strong",[_._v("현상 파악")]),_._v("   ➜   어떤 일이 발생 / 해당 일의 어려움 / 해결하면 좋은 것 / 추가적으로 해결해볼 요소 / 어떤 가설을 설정 / 데이터 성격 ...")])]),_._v(" "),e("br"),_._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[e("strong",[_._v("구체적인 문제 정의")]),_._v("   ➜  정의한 구체적인 문제 상황을 일으키는 원인과 해결 방안 고민\n"),e("ul",[e("li",[_._v("문제를 쪼개서 파악하기, 해결 방식이 다양할 수 있음을 인지, 데이터로 해결할 수 있는 방법 고민, "),e("strong",[_._v("점진적으로 실행")]),_._v("하기")])])])]),_._v(" "),e("br"),_._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[e("strong",[_._v("프로젝트 설계")]),_._v(" "),e("ul",[e("li",[_._v("문제 정의 ➜ 최적화할 Metric 선택 ➜ 데이터 수집, 레이블 확인 ➜ 모델 개발 ➜ 예측 결과를 토대로 Error 분석 (잘못된 라벨이 왜 생기는지)")]),_._v(" "),e("li",[_._v("분석 후 다시 모델 학습 & 더 많은 데이터 수집 ( 시간 흐름에 따라 성격이 달라짐 ) - 반복")]),_._v(" "),e("li",[_._v("학습할 패턴이 있다고 생각되는 문제에 머신러닝을 적용하면 좋다 (그것이 아니라면 굳이 머신러닝을 고집하지 않는 것이 좋을 수도 있다).\n"),e("ul",[e("li",[_._v("패턴이 있다면 "),e("strong",[_._v("복잡한 것")]),_._v("이 좋다.")])])]),_._v(" "),e("li",[_._v("학습을 위한 "),e("strong",[_._v("목적 함수")]),_._v("를 만들 수 있어야 한다.")])])])]),_._v(" "),e("br"),_._v(" "),e("ol",{attrs:{start:"4"}},[e("li",[e("strong",[_._v("지표 결정")]),_._v(" "),e("ul",[e("li",[_._v("Goal   ➜   프로젝트의 일반적인 목적. 큰 목적")]),_._v(" "),e("li",[_._v("Objectives   ➜   목적을 달성하기 위한 세부 단계의 목표 (구체적인 목적)\n"),e("ul",[e("li",[_._v("ex) NSFW (Not Safe For Work) 컨텐츠 필터링을 통해 사용자에게 불쾌감을 줄임")])])]),_._v(" "),e("li",[_._v("목표를 설정하며 데이터를 확인 (있는 경우 / 애매한 경우 / 없는 경우)")]),_._v(" "),e("li",[_._v("Multiple Objective Optimizatoin\n"),e("ul",[e("li",[_._v("목적 함수가 여러개 있는 경우, 충돌할 수 있음")]),_._v(" "),e("li",[_._v("분리하는 것이 좋음\n"),e("ul",[e("li",[_._v("학습하기 쉬워야 함 (하나의 Objective 를 최적화하는 것이 여러 Objective 를 최적화하는 것보다 쉬움)")]),_._v(" "),e("li",[_._v("모델을 재학습하지 않도록 모델을 분리")]),_._v(" "),e("li",[_._v("Objective 별 유지 보수 일정이 다를 수 있음")])])])])]),_._v(" "),e("li",[_._v("제약조건 ( 일정 / 예산 / 개인정보 / 윤리 ... )")]),_._v(" "),e("li",[_._v("성능 ( Baseline / Threshold / Performance Trade-off / 해석 가능 여부 / Confidence Measurement )\n"),e("ul",[e("li",[_._v("유사한 문제를 해결하고 있는 "),e("strong",[_._v("SOTA 논문 파악")]),_._v("해보기")])])]),_._v(" "),e("li",[_._v("프로토타입\n"),e("ul",[e("li",[_._v("Input 을 입력하면 Output 을 반환하는 웹페이지 ( 같은 조건에서는 디자인보다는 모델에 집중 )")]),_._v(" "),e("li",[e("span",{staticStyle:{color:"#2454ff"}},[e("strong",[_._v("Voila, Streamlit, Gradio")])]),_._v(" 등을 활용")])])]),_._v(" "),e("li",[_._v("Metric Evaluation\n"),e("ul",[e("li",[_._v("Objective 를 구해서 모델의 성능 지표는 확인했지만, 별개로 비즈니스 목표에 영향을 파악하는 것도 중요")]),_._v(" "),e("li",[_._v("ex) 작게는 RMSE 부터, 크게는 고객의 "),e("strong",[_._v("재방문율")]),_._v(", "),e("strong",[_._v("매출")]),_._v(" 등")]),_._v(" "),e("li",[_._v("지표를 잘 정의해야 기존보다 더 성과를 냈는지 아닌지를 파악할 수 있음 ( "),e("span",{staticStyle:{color:"#2454ff"}},[e("strong",[_._v("AB Test")])]),_._v("를 진행 )")])])])])])]),_._v(" "),e("br"),_._v(" "),e("ol",{attrs:{start:"5"}},[e("li",[e("strong",[_._v("Action")]),_._v(" (모델 개발 후 배포 & 모니터링)\n"),e("ul",[e("li",[_._v("어떤 결과를 내고 있는지")]),_._v(" "),e("li",[_._v("잘못 예측 시, 어떤 부분이 문제일지")]),_._v(" "),e("li",[_._v("어떤 부분을 기반으로 예측하고 있는지")]),_._v(" "),e("li",[_._v("Feature 의 어떤 값을 사용할 때 잘못 예측하는지")])])])]),_._v(" "),e("br"),_._v(" "),e("ol",{attrs:{start:"6"}},[e("li",[e("strong",[_._v("추가 원인 분석")])])]),_._v(" "),e("br"),_._v(" "),e("h4",{attrs:{id:"비즈니스-모델"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#비즈니스-모델"}},[_._v("#")]),_._v(" 비즈니스 모델")]),_._v(" "),e("p",[_._v("  비즈니스에 대한 이해도가 높을수록 문제 정의를 잘 할 가능성이 존재한다.")]),_._v(" "),e("ul",[e("li",[e("strong",[_._v("비즈니스 모델 파악하기")]),_._v(" "),e("ul",[e("li",[_._v("해당 비즈니스 모델에서 어떤 데이터가 존재하고, 그 데이터를 기반으로 어떤 것을 만들 수 있을지 생각")])]),_._v(" "),e("ol",[e("li",[_._v("비즈니스 파악하기\n"),e("ul",[e("li",[_._v("비즈니스 모델을 파악하기 위해서 산업에 대해 정리해둔 Paper 가 있는지 찾아보자. ( ex. "),e("strong",[_._v("Awesome Mobility Machine Learning GitHub")]),_._v(" )")])])]),_._v(" "),e("li",[_._v("데이터를 활용할 수 있는 부분 (INPUT)\n"),e("ul",[e("li",[_._v("데이터 종류, 데이터로 할 수 있는 것, 데이터의 신뢰성 ...")])])]),_._v(" "),e("li",[_._v("예측 결과가 활용되는 부분 (OUTPUT)\n"),e("ul",[e("li",[_._v("고객에게 바로 노출 (추천, 얼굴 필터 등) / 업무 자동화 ...")])])])])])]),_._v(" "),e("br"),_._v(" "),e("hr"),_._v(" "),e("h4",{attrs:{id:"linux"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#linux"}},[_._v("#")]),_._v(" Linux")]),_._v(" "),e("p",[e("strong",[_._v("Linux 를 알아야 하는 이유")])]),_._v(" "),e("p",[_._v("    ➜ 서버에서 자주 사용하는 OS (Mac, Window 도 가능하지만 유료 - 라이센스 구입해야 함)"),e("br"),_._v("\n    ➜ 오픈소스 (여러 버전이 존재하며, 커스텀 가능)"),e("br"),_._v("\n    ➜ 안정성, 신뢰성 (유닉스)"),e("br"),_._v("\n    ➜ 쉘 커맨드, 쉘 스크립트")]),_._v(" "),e("br"),_._v(" "),e("p",[e("strong",[_._v("대표적인 Linux 배포판")])]),_._v(" "),e("p",[_._v("  다양한 Linux 배포판이 있다 ➜ "),e("a",{attrs:{href:"https://upload.wikimedia.org/wikipedia/commons/1/1b/Linux_Distribution_Timeline.svg",target:"_blank",rel:"noopener noreferrer"}},[_._v("참고"),e("OutboundLink")],1)]),_._v(" "),e("ul",[e("li",[e("strong",[_._v("Debian")]),_._v("   ➜   온라인 커뮤니티에서 제작해 배포")]),_._v(" "),e("li",[e("strong",[_._v("Ubuntu")]),_._v("   ➜   영국의 캐노니컬 회사에서 만든 배포판. 초보자들도 쉽게 접근할 수 있고, 설치도 쉽다.")]),_._v(" "),e("li",[e("strong",[_._v("Redhat")]),_._v("   ➜   Red Hat 회사에서 배포한 리눅스")]),_._v(" "),e("li",[e("strong",[_._v("CentOS")]),_._v("   ➜   Red Hat 이 공개한 버전을 가져와 브랜드와 로고를 제거하고 배포한 버전")])]),_._v(" "),e("br"),_._v(" "),e("p",[e("strong",[_._v("Linux 를 사용하는 방법")])]),_._v(" "),e("ul",[e("li",[_._v("VirtualBox 에 Linux 설치, Docker 로 설치")]),_._v(" "),e("li",[_._v("WSL 사용 (윈도우)")]),_._v(" "),e("li",[_._v("Notebook 에서 터미널 실행")]),_._v(" "),e("li",[_._v("Cloud 속 인스턴스 사용")])]),_._v(" "),e("br"),_._v(" "),e("p",[e("strong",[_._v("쉘의 종류")])]),_._v(" "),e("ul",[e("li",[e("strong",[_._v("쉘")]),_._v("   ➜   사용자가 문자를 입력해 컴퓨터에 명령할 수 있도록 하는 프로그램")]),_._v(" "),e("li",[e("strong",[_._v("터미널/콘솔")]),_._v("   ➜   쉘을 실행하기 위해 문자 입력을 받는 곳. 프로그램의 출력을 화면에 작성")]),_._v(" "),e("li",[e("strong",[_._v("sh")]),_._v("   ➜   최초의 쉘")]),_._v(" "),e("li",[e("strong",[_._v("bash")]),_._v("   ➜   Linux 표준 쉘")]),_._v(" "),e("li",[e("strong",[_._v("zsh")]),_._v("   ➜   Mac 카탈리나 OS 기본 쉘")])]),_._v(" "),e("br"),_._v(" "),e("p",[e("strong",[_._v("쉘 UX")])]),_._v(" "),e("ul",[e("li",[e("code",[_._v("username@hostname:current_folder")]),_._v(" "),e("ul",[e("li",[_._v("hostname   ➜   컴퓨터 네트워크에 접속된 장치에 할당된 이름으로, IP 대신 기억하기 쉬운 글자로 저장해 놓는다.")])])])]),_._v(" "),e("br"),_._v(" "),e("p",[e("strong",[_._v("쉘을 사용하는 경우")])]),_._v(" "),e("ul",[e("li",[_._v("서버에서 접속해서 사용하는 경우")]),_._v(" "),e("li",[e("strong",[_._v("crontab")]),_._v(" 등 Linux 의 내장 기능을 활용하는 경우\n"),e("ul",[e("li",[_._v("crontab   ➜   서버 스스로 정해둔 명령을 "),e("strong",[_._v("일정 기간마다 실행하도록 하는 것")])])])]),_._v(" "),e("li",[_._v("데이터 전처리를 하기 위해 쉘 커맨드를 사용")]),_._v(" "),e("li",[_._v("Docker 를 사용하는 경우")]),_._v(" "),e("li",[_._v("수백대의 서버를 관리할 경우")]),_._v(" "),e("li",[_._v("Jupyter Notebook 의 Cell 에서 "),e("code",[_._v("!")]),_._v(" 를 붙치면 쉘 커맨드가 사용됨")]),_._v(" "),e("li",[_._v("터미널에서 python3, jupyter notebook 도 쉘 커맨드")]),_._v(" "),e("li",[_._v("Test Code 실행")]),_._v(" "),e("li",[_._v("배포 파이프라인 실행 (GitHub Action 등에서 실행)")])]),_._v(" "),e("br"),_._v(" "),e("p",[e("strong",[_._v("기본 쉘 커맨드")])]),_._v(" "),e("p",[_._v("mkdir, cd, ls, echo, wget, pwd, mv, cp, clear, history, cat, bash, export, alias ...")]),_._v(" "),e("ul",[e("li",[e("code",[_._v("man")]),_._v(" "),e("ul",[e("li",[_._v("쉘 커맨드의 매뉴얼 문서를 보고 싶은 경우에 사용한다.")]),_._v(" "),e("li",[e("code",[_._v("man python")])]),_._v(" "),e("li",[_._v("종료하려면 "),e("code",[_._v(":q")]),_._v(" 를 입력한다.")])])])]),_._v(" "),e("br"),_._v(" "),e("ul",[e("li",[e("code",[_._v("mkdir")]),_._v("   ➜   폴더 생성하기 ( "),e("strong",[_._v("M")]),_._v("a"),e("strong",[_._v("k")]),_._v("e "),e("strong",[_._v("Dir")]),_._v("ectory ) - "),e("code",[_._v("mkdir folder_name")])])]),_._v(" "),e("br"),_._v(" "),e("ul",[e("li",[e("code",[_._v("ls")]),_._v(" "),e("ul",[e("li",[_._v("현재 접근한 폴더의 폴더/파일을 확인한다 ( "),e("strong",[_._v("L")]),_._v("ist "),e("strong",[_._v("S")]),_._v("egments ).")]),_._v(" "),e("li",[_._v("ls 뒤에 아무것도 작성하지 않으면 현재 폴더 기준으로 실행되고, 경로를 작성하면 해당 경로기준에서 실행한다.")]),_._v(" "),e("li",[_._v("옵션\n"),e("ul",[e("li",[e("code",[_._v("-a")]),_._v("   ➜   "),e("code",[_._v(".")]),_._v(" 으로 시작하는 폴더/파일을 포함해 전체 파일을 출력한다.")]),_._v(" "),e("li",[e("code",[_._v("-l")]),_._v("   ➜   "),e("strong",[_._v("퍼미션, 소유자, 만든 날짜, 용량")]),_._v("까지 출력한다.")]),_._v(" "),e("li",[e("code",[_._v("-h")]),_._v("   ➜   용랑을 사람이 읽기 쉽도록 GB, MB 등으로 표현한다. ( "),e("code",[_._v("-l")]),_._v(" 과 같이 사용)")]),_._v(" "),e("li",[_._v("ex) "),e("code",[_._v("ls")]),_._v(" "),e("code",[_._v("ls ~")]),_._v(" "),e("code",[_._v("ls -al")]),_._v(" "),e("code",[_._v("ls -lh")])])])])])])]),_._v(" "),e("br"),_._v(" "),e("ul",[e("li",[e("code",[_._v("pwd")]),_._v("   ➜   현재 폴더 경로를 절대 경로로 보여준다 ( "),e("strong",[_._v("P")]),_._v("rint "),e("strong",[_._v("W")]),_._v("orking "),e("strong",[_._v("D")]),_._v("irectory ).")])]),_._v(" "),e("br"),_._v(" "),e("ul",[e("li",[e("code",[_._v("cd")]),_._v("   ➜   폴더를 변경/이동한다. ( "),e("strong",[_._v("C")]),_._v("hange "),e("strong",[_._v("D")]),_._v("irectory ) - "),e("code",[_._v("cd folder")]),_._v(" "),e("code",[_._v("cd folder_path")])])]),_._v(" "),e("br"),_._v(" "),e("ul",[e("li",[e("code",[_._v("echo")]),_._v(" "),e("ul",[e("li",[_._v("터미널에 텍스트를 출력한다. - "),e("code",[_._v('echo "hi"')])]),_._v(" "),e("li",[_._v("echo "),e("code",[_._v("쉘커맨드")]),_._v(" 입력 시 쉘 커맨드의 결과를 출력한다.")])])])]),_._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[_._v("echo")]),_._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[_._v("`")]),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[_._v("pwd")]),e("span",{pre:!0,attrs:{class:"token variable"}},[_._v("`")])]),_._v("\n")])])]),e("br"),_._v(" "),e("ul",[e("li",[e("code",[_._v("vi")]),_._v(" "),e("ul",[e("li",[e("code",[_._v("vi 파일명")]),_._v("   ➜   경로상에 파일이 없다면 vim 편집기로 파일을 생성하며 열리고, 아니면 기존 파일이 열린다.")]),_._v(" "),e("li",[e("strong",[_._v("Command Mode")]),_._v("   ➜   vi 실행시 기본 모드이다.\n"),e("ul",[e("li",[e("code",[_._v("dd")]),_._v("   ➜   현재 줄 삭제 (한 줄)")]),_._v(" "),e("li",[e("code",[_._v("i")]),_._v("   ➜   INSERT 모드로 변경")]),_._v(" "),e("li",[e("code",[_._v("x")]),_._v("   ➜   커서가 위치한 곳의 글자 1개 삭제 (누르는 만큼 반복)")]),_._v(" "),e("li",[e("code",[_._v("yy")]),_._v("   ➜   현재 줄을 복사")]),_._v(" "),e("li",[e("code",[_._v("p")]),_._v("   ➜   현재 커서가 있는 줄 바로 아래에 붙여넣기")]),_._v(" "),e("li",[e("code",[_._v("h")]),_._v(", "),e("code",[_._v("j")]),_._v(", "),e("code",[_._v("k")]),_._v(", "),e("code",[_._v("l")]),_._v("   ➜   왼쪽 / 아래 / 위 / 오른쪽 으로 커서 움직이기")])])]),_._v(" "),e("li",[e("strong",[_._v("Insert Mode")]),_._v("   ➜   파일을 수정할 수 있는 모드로, Command Mode 로 다시 이동하려면 "),e("code",[_._v("ESC")]),_._v(" 를 누르면 된다.\n"),e("ul",[e("li",[e("code",[_._v("w")]),_._v("   ➜   현재 파일명으로 저장한다.")]),_._v(" "),e("li",[e("code",[_._v("q")]),_._v("   ➜   vi 를 종료한다 (저장하지 않는다).")]),_._v(" "),e("li",[e("code",[_._v("q!")]),_._v("   ➜   vi 를 강제로 종료한다.")]),_._v(" "),e("li",[e("code",[_._v("wq")]),_._v("   ➜   저장 후 종료한다.")]),_._v(" "),e("li",[e("code",[_._v("/문자")]),_._v("   ➜   문자를 탐색한다. 탐색한 후 "),e("code",[_._v("n")]),_._v(" 을 누르면 반복해서 탐색을 실행한다.")]),_._v(" "),e("li",[e("code",[_._v("set nu")]),_._v("   ➜   vi 에서 라인별 번호를 표시한다.")])])]),_._v(" "),e("li",[e("strong",[_._v("Last Line Mode")])])])])]),_._v(" "),e("br"),_._v(" "),e("ul",[e("li",[e("code",[_._v("bash")]),_._v("   ➜   쉘 스크립트를 실행한다. - "),e("code",[_._v("bash filename.sh")]),_._v("   터미널에서 "),e("strong",[_._v("Tab")]),_._v(" 을 누르면 자동완성된다.")])]),_._v(" "),e("br"),_._v(" "),e("ul",[e("li",[e("code",[_._v("sudo")]),_._v(" "),e("ul",[e("li",[_._v("관리자 권한으로 실행하고 싶은 경우 커맨드 앞에 "),e("code",[_._v("sudo")]),_._v(" 를 붙인다.")]),_._v(" "),e("li",[_._v("sudo 명령어는 최고 권한을 가진 "),e("strong",[_._v("슈퍼 유저")]),_._v("로 프로그램을 실행한다.")]),_._v(" "),e("li",[_._v("모~~든 것을 다 삭제   ➜   "),e("code",[_._v("sudo rm -rf /")])]),_._v(" "),e("li",[e("code",[_._v("sudo")]),_._v(" 사용은 자제하자. "),e("code",[_._v("pip install")]),_._v(" 시 안된다고 "),e("code",[_._v("sudo pip install")]),_._v(" 을 사용하면 개발 환경이 꼬일 수도 있다!\n"),e("ul",[e("li",[e("code",[_._v("sudo pip install")]),_._v(" 보단 "),e("code",[_._v("pip install --user")]),_._v(" 를 고려해보자.")])])])])])]),_._v(" "),e("br"),_._v(" "),e("ul",[e("li",[e("code",[_._v("cp")]),_._v(" "),e("ul",[e("li",[_._v("폴더/파일을 복사한다. - "),e("code",[_._v("cp copyed_name.sh pasted_name.sh")])]),_._v(" "),e("li",[e("code",[_._v("-r")]),_._v("   ➜   디렉토리를 복사할 때, 디렉토리 안에 파일이 있으면 재귀적으로 모두 복사한다.")]),_._v(" "),e("li",[e("code",[_._v("-f")]),_._v("   ➜   복사할 때 이슈가 있어도 강제로 복사한다.")])])])]),_._v(" "),e("br"),_._v(" "),e("ul",[e("li",[e("code",[_._v("mv")]),_._v("   ➜   폴더/파일을 이동하거나 이름을 바꿀 때 사용한다. - "),e("code",[_._v("mv before_name.sh after_name.sh")])])]),_._v(" "),e("br"),_._v(" "),e("ul",[e("li",[e("code",[_._v("cat")]),_._v(" "),e("ul",[e("li",[_._v("특정 파일 내용을 출력한다. - "),e("code",[_._v("cat filename.sh")])]),_._v(" "),e("li",[_._v("여러 파일을 인자로 주면 합쳐서 ( concat ) 출력한다. - "),e("code",[_._v("cat file_1.sh file_2.sh")])]),_._v(" "),e("li",[_._v("파일에 저장하고 ( overwrite ) 싶은 경우에는 다음과 같이 사용한다. - "),e("code",[_._v("cat file_1.sh file_2.sh > new_file.sh")])]),_._v(" "),e("li",[_._v("파일에 추가하고 ( append ) 싶은 경우에는 다음과 같이 사용한다. - "),e("code",[_._v("cat file_1.sh file_2.sh >> file_3.sh")])])])])]),_._v(" "),e("br"),_._v(" "),e("ul",[e("li",[e("code",[_._v("clear")]),_._v("   ➜   터미널 창을 깨끗하게 해줌")])]),_._v(" "),e("br"),_._v(" "),e("ul",[e("li",[e("code",[_._v("history")]),_._v(" "),e("ul",[e("li",[_._v("최근에 입력한 쉘 커맨드 history 를 출력한다.")]),_._v(" "),e("li",[_._v("History 결과에서 느낌표를 붙이고 해당 숫자 입력 시 그 커맨드를 다시 활용할 수 있다. - "),e("code",[_._v("!20")])])])])]),_._v(" "),e("br"),_._v(" "),e("ul",[e("li",[e("code",[_._v("find")]),_._v(" "),e("ul",[e("li",[_._v("파일/디렉토리를 검색할 때 사용한다.")]),_._v(" "),e("li",[_._v("현재 폴더에서 File 이름을 가지는 파일/디렉토리 검색   ➜   "),e("code",[_._v('find . -name "File"')])])])])]),_._v(" "),e("br"),_._v(" "),e("ul",[e("li",[e("code",[_._v("export")]),_._v(" "),e("ul",[e("li",[_._v("환경 변수를 설정하는데 사용된다. - "),e("code",[_._v("export name='dooho'")]),_._v("   확인   ➜   "),e("code",[_._v("echo $name")])]),_._v(" "),e("li",[_._v("export 로 환경 변수를 설정한 경우, 터미널이 꺼지면 사라지게 된다.\n"),e("ul",[e("li",[_._v("매번 쉘을 실행할 때마다 환경변수를 저장하고 싶으면 "),e("code",[_._v(".bashrc")]),_._v(", "),e("code",[_._v(".zshrc")]),_._v(" 에 저장하면 된다.")]),_._v(" "),e("li",[_._v("ex) "),e("code",[_._v("vi ~/.bashrc")]),_._v(" 입력 후 나오는 편집기에서 "),e("code",[_._v("export name='dooho'")]),_._v(" 입력하고 "),e("code",[_._v(":wq")]),_._v(" 로 저장 후 종료")]),_._v(" "),e("li",[_._v("그 후 "),e("code",[_._v("source ~/.bashrc")]),_._v(" 로 즉시 적용시킨다 (하지 않으면, 재로그인해야 적용된다).")])])])])])]),_._v(" "),e("br"),_._v(" "),e("ul",[e("li",[e("code",[_._v("alias")]),_._v(" "),e("ul",[e("li",[_._v("터미널에서 "),e("code",[_._v("alias")]),_._v(" 라고 치면 현재 별칭으로 설정된 것을 볼 수 있다.")]),_._v(" "),e("li",[_._v("ex) "),e("code",[_._v("alias ll2='ls -l'")]),_._v("   ➜   별칭을 등록한 것으로, "),e("code",[_._v("ll2")]),_._v(" 입력시 "),e("code",[_._v("ls -l")]),_._v(" 이 실행된다.")])])])]),_._v(" "),e("br"),_._v(" "),e("h4",{attrs:{id:"추가-쉘-커맨드"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#추가-쉘-커맨드"}},[_._v("#")]),_._v(" 추가 쉘 커맨드")]),_._v(" "),e("ul",[e("li",[e("code",[_._v("head")]),_._v(", "),e("code",[_._v("tail")]),_._v("   ➜   파일의 앞/뒤 n 행을 출력한다. - "),e("code",[_._v("head -n 4 filename.sh")])])]),_._v(" "),e("br"),_._v(" "),e("ul",[e("li",[e("code",[_._v("sort")]),_._v(" "),e("ul",[e("li",[_._v("행 단위 정렬이다.")]),_._v(" "),e("li",[e("code",[_._v("-r")]),_._v("   ➜   내림차순 정렬 ( default=오름차순)")]),_._v(" "),e("li",[e("code",[_._v("-n")]),_._v("   ➜   Numeric Sort (사용하지 않으면 String Sort)")]),_._v(" "),e("li",[_._v("ex) "),e("code",[_._v("cat some_words_file.txt | sort")]),_._v(" "),e("code",[_._v("cat some_words_file.txt | sort -r")])])])])]),_._v(" "),e("br"),_._v(" "),e("ul",[e("li",[e("code",[_._v("uniq")]),_._v(" "),e("ul",[e("li",[_._v("중복된 행이 "),e("strong",[_._v("연속")]),_._v("으로 있는 경우 중복 제거한다 ( sort 와 함께 자주 사용한다 ).")]),_._v(" "),e("li",[e("code",[_._v("-c")]),_._v("   ➜   중복 행의 개수 출력")]),_._v(" "),e("li",[_._v("ex) "),e("code",[_._v("cat words.txt | uniq")]),_._v(" "),e("code",[_._v("cat words.txt | sort | uniq")]),_._v(" "),e("code",[_._v("cat words.txt | uniq | wc -l")]),_._v(" "),e("code",[_._v("cat words.txt | sort | uniq | wc -l")])])])])]),_._v(" "),e("br"),_._v(" "),e("ul",[e("li",[e("code",[_._v("grep")]),_._v(" "),e("ul",[e("li",[_._v("파일에 주어진 패턴 목록과 매칭되는 라인을 검색한다. - "),e("code",[_._v("grep 옵션 패턴 파일_이름")])]),_._v(" "),e("li",[e("code",[_._v("-i")]),_._v("   ➜   대소문자 구분 없이 찾기")]),_._v(" "),e("li",[e("code",[_._v("-w")]),_._v("   ➜   정확히 그 단어만 찾기")]),_._v(" "),e("li",[e("code",[_._v("-v")]),_._v("   ➜   특정 패턴 제외한 결과 출력")]),_._v(" "),e("li",[e("code",[_._v("-E")]),_._v("   ➜   정규 표현식 사용\n"),e("ul",[e("li",[e("code",[_._v("^단어")]),_._v("   ➜   단어로 시작하는 것 찾기")]),_._v(" "),e("li",[e("code",[_._v("단어$")]),_._v("   ➜   단어로 끝나는 것 찾기")]),_._v(" "),e("li",[e("code",[_._v(".")]),_._v("   ➜   하나의 문자 매칭")])])])])])]),_._v(" "),e("br"),_._v(" "),e("ul",[e("li",[e("code",[_._v("cut")]),_._v(" "),e("ul",[e("li",[_._v("파일에서 특정 필드를 추출한다.")]),_._v(" "),e("li",[e("code",[_._v("-f")]),_._v("   ➜   잘라낼 필드를 지정한다.")]),_._v(" "),e("li",[e("code",[_._v("-d")]),_._v("   ➜   필드를 구분하는 구분자를 지정한다. ( default=\\t)")]),_._v(" "),e("li",[_._v("ex) "),e("code",[_._v("cat file.txt | cut -d : -f 1,7")]),_._v("   ➜   file.txt 내용 중에서 : 를 기준으로 나눴을 때, 1번째와 7번째를 가져옴")])])])]),_._v(" "),e("br"),_._v(" "),e("p",[e("strong",[_._v("표준 스트림")])]),_._v(" "),e("p",[_._v("Unix 에서 동작하는 프로그램은 커맨드 실행시 "),e("strong",[_._v("3개의 Stream 이 생성")]),_._v("된다.")]),_._v(" "),e("ul",[e("li",[e("code",[_._v("stdin")]),_._v("   ➜   0으로 펴현, 입력 (비밀번호, 커맨드 등)")]),_._v(" "),e("li",[e("code",[_._v("stdout")]),_._v("   ➜   1로 표현, 출력 값 (터미널에 나오는 값)")]),_._v(" "),e("li",[e("code",[_._v("stderr")]),_._v("   ➜   2로 표현, 디버깅 정보나 에러 출력")])]),_._v(" "),e("br"),_._v(" "),e("p",[e("strong",[_._v("Redirection & Pipe")])]),_._v(" "),e("p",[_._v("Redirection 이란 프로그램의 출력( stdout )을 다른 파일이나 스트림으로 전달하는 것을 의미한다.")]),_._v(" "),e("ul",[e("li",[e("code",[_._v(">")]),_._v("   ➜   덮어쓰기 ( overwrite ) 파일이 없으면 생성하고 저장한다.")]),_._v(" "),e("li",[e("code",[_._v(">>")]),_._v("   ➜   맨 아래에 추가한다. ( append )")]),_._v(" "),e("li",[_._v("ex) "),e("code",[_._v('echo "hi" > test_file.sh')])])]),_._v(" "),e("p",[_._v("Pipe 는 프로그램의 출력( stdout )을 다른 프로그램의 입력으로 사용하고 싶은 경우에 사용한다."),e("br"),_._v("\nA 의 Output 을 B 의 Input 으로 사용하는 등 다양한 커맨드 조합에 사용된다.")]),_._v(" "),e("p",[_._v("ex) 현재 폴더에 있는 파일명 중 vi 가 들어간 단어를 찾고 싶은 경우   ➜   "),e("code",[_._v('ls | grep "vi"')])]),_._v(" "),e("p",[_._v("ex) 찾은 결과를 저장하고 싶은 경우   ➜   "),e("code",[_._v('ls | grep "vi" > output.txt')])]),_._v(" "),e("p",[_._v("ex) 최근 입력한 커맨드 중 echo 가 들어간 명령어 찾기   ➜   "),e("code",[_._v('history | grep "echo"')])]),_._v(" "),e("br"),_._v(" "),e("h4",{attrs:{id:"서버에서-자주-사용하는-쉘-커맨드"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#서버에서-자주-사용하는-쉘-커맨드"}},[_._v("#")]),_._v(" 서버에서 자주 사용하는 쉘 커맨드")]),_._v(" "),e("ul",[e("li",[e("code",[_._v("ps")]),_._v(" "),e("ul",[e("li",[_._v("현재 실행되고 있는 프로세스를 출력한다. ( "),e("strong",[_._v("P")]),_._v("rocess "),e("strong",[_._v("S")]),_._v("tatus )")]),_._v(" "),e("li",[e("code",[_._v("-e")]),_._v("   ➜   모든 프로세스를 출력한다.")]),_._v(" "),e("li",[e("code",[_._v("-f")]),_._v("   ➜   Full Format 으로 자세히 보여준다.")])])])]),_._v(" "),e("br"),_._v(" "),e("ul",[e("li",[e("code",[_._v("curl")]),_._v(" "),e("ul",[e("li",[_._v("Command Line 기반의 Data Transfer 커맨드이다. ( "),e("strong",[_._v("C")]),_._v("lient "),e("strong",[_._v("URL")]),_._v(" )")]),_._v(" "),e("li",[_._v("웹 서버를 작성한 후 요청이 제대로 실행되는지 확인할 수 있다.")]),_._v(" "),e("li",[_._v("ex) "),e("code",[_._v("curl -X localhost:8080/ {data}")])]),_._v(" "),e("li",[_._v("curl 외에 "),e("strong",[_._v("httpie")]),_._v(" 등도 있다 (더 가독성있게 출력된다).")])])])]),_._v(" "),e("br"),_._v(" "),e("ul",[e("li",[e("code",[_._v("df")]),_._v(" "),e("ul",[e("li",[_._v("현재 사용중인 디스크 용량 확인하는데 사용된다. ( "),e("strong",[_._v("D")]),_._v("isk "),e("strong",[_._v("F")]),_._v("ree )")]),_._v(" "),e("li",[e("code",[_._v("-h")]),_._v("   ➜   사람이 읽기 쉬운 형태로 출력한다.")])])])]),_._v(" "),e("br"),_._v(" "),e("ul",[e("li",[e("code",[_._v("scp")]),_._v(" "),e("ul",[e("li",[_._v("SSH 를 이용해 네트워크로 연결된 호스트 간 "),e("strong",[_._v("파일을 주고 받는 명령어")]),_._v("이다. ( "),e("strong",[_._v("S")]),_._v("ecure "),e("strong",[_._v("C")]),_._v("o"),e("strong",[_._v("p")]),_._v("y )")]),_._v(" "),e("li",[e("code",[_._v("-r")]),_._v("   ➜   재귀적으로 복사한다.")]),_._v(" "),e("li",[e("code",[_._v("-P")]),_._v("   ➜   SSH 포트를 지정한다.")]),_._v(" "),e("li",[e("code",[_._v("-i")]),_._v("   ➜   SSH 설정을 활용해 실행한다. (key file 같이 입력해야 함)")]),_._v(" "),e("li",[_._v("ex) local ➜ remote - "),e("code",[_._v("scp loacl_path user@ip:remote_directory")])]),_._v(" "),e("li",[_._v("ex) remote ➜ local - "),e("code",[_._v("scp user@ip:remote_directory local_path")])]),_._v(" "),e("li",[_._v("ex) remote ➜ remote - "),e("code",[_._v("scp user@ip:remote_directory user2@ip2:target_remote_directory")])])])])]),_._v(" "),e("br"),_._v(" "),e("ul",[e("li",[e("code",[_._v("nohup")]),_._v(" "),e("ul",[e("li",[_._v("터미널 종료 후에도 계속 작업이 유지하도록( "),e("strong",[_._v("백그라운드 실행")]),_._v(" ) 하는 명령어이다.")]),_._v(" "),e("li",[_._v("ex) "),e("code",[_._v("nohup python3 app.py &")])]),_._v(" "),e("li",[_._v("nohup 으로 실행될 파일은 "),e("span",{staticStyle:{color:"#2454ff"}},[e("strong",[_._v("Permission 이 755")])]),_._v(" 여야 한다.")]),_._v(" "),e("li",[_._v("종료는 "),e("code",[_._v("ps ef | grep app.py")]),_._v(" 한 후, "),e("strong",[_._v("pid")]),_._v("( Process ID ) 를 찾은 후 "),e("code",[_._v("kill -9 pid")]),_._v(" 방식으로 프로세스를 "),e("strong",[_._v("kill")]),_._v(" 한다.")]),_._v(" "),e("li",[e("strong",[_._v("로그")]),_._v("는 "),e("strong",[_._v("nohub.out")]),_._v(" 에 저장된다.")]),_._v(" "),e("li",[_._v("nohup 외에도 "),e("strong",[_._v("screen")]),_._v(" 이란 도구가 있다.")])])])]),_._v(" "),e("br"),_._v(" "),e("ul",[e("li",[e("code",[_._v("chmod")]),_._v(" "),e("ul",[e("li",[_._v("파일의 권한을 변경하는데 사용된다. ( "),e("strong",[_._v("Ch")]),_._v("ange "),e("strong",[_._v("Mod")]),_._v("e )")]),_._v(" "),e("li",[_._v("유닉스에서 파일이나 디렉토리의 시스템 모드를 변경한다.")]),_._v(" "),e("li",[_._v("권한 관련 사항은 "),e("code",[_._v("ls -al")]),_._v(" 을 입력하면 나온다.")]),_._v(" "),e("li",[_._v("Permission\n"),e("ul",[e("li",[e("code",[_._v("r")]),_._v("   ➜   Read (읽기), "),e("strong",[_._v("4")])]),_._v(" "),e("li",[e("code",[_._v("w")]),_._v("   ➜   Write (쓰기), "),e("strong",[_._v("2")])]),_._v(" "),e("li",[e("code",[_._v("x")]),_._v("   ➜   eXecute (실행), "),e("strong",[_._v("1")])]),_._v(" "),e("li",[e("code",[_._v("-")]),_._v("   ➜   Denied")]),_._v(" "),e("li",[_._v("세 가지 부분으로 나뉜다. "),e("strong",[_._v("유저/그룹/그외")]),_._v(" "),e("ul",[e("li",[_._v("ex) -rw-rw-r--   ➜   유저는 읽고 쓰기, 그룹은 읽고 쓰기, 그외는 읽기 권한만.")])])]),_._v(" "),e("li",[_._v("ex) "),e("code",[_._v("r-x")]),_._v("   ➜   읽거나 실행할 수는 있지만 수정은 불가능")]),_._v(" "),e("li",[_._v("ex) 755 or 644 로 퍼미션 주세요   ➜   rwx 를 더하면 4+2+1 = 7")])])]),_._v(" "),e("li",[_._v("ex) "),e("code",[_._v("chmod 755 filename.sh")]),_._v(" 를 통해 filename.sh 의 권한이 755로 설정된다.")])])])]),_._v(" "),e("br"),_._v(" "),e("h4",{attrs:{id:"쉘-스크립트"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#쉘-스크립트"}},[_._v("#")]),_._v(" 쉘 스크립트")]),_._v(" "),e("p",[e("code",[_._v(".sh")]),_._v(" 파일을 생성하고, 그 안에 쉘 커맨드를 추가한 것을 말한다.\n파이썬처럼 "),e("code",[_._v("if")]),_._v(", "),e("code",[_._v("while")]),_._v(", "),e("code",[_._v("case")]),_._v(" 문이 존재하며, 작성시 "),e("code",[_._v("bash filename.sh")]),_._v(" 로 실행 가능하다.")]),_._v(" "),e("p",[_._v("항상 상단에 Shebang 을 작성하여 어떤 쉘로 실행시킬 지 작성해야 한다.   ➜   "),e("code",[_._v("#!bin/bash")])]),_._v(" "),e("br"),_._v(" "),e("hr"),_._v(" "),e("h4",{attrs:{id:"docker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker"}},[_._v("#")]),_._v(" Docker")]),_._v(" "),e("p",[_._v("Docker 를 배우기 전에 가상화 개념에 대해 알아야 한다.")]),_._v(" "),e("p",[e("strong",[_._v("가상화")])]),_._v(" "),e("p",[_._v("  개발할 때, 서비스 운용중인 서버에 직접 들어가서 개발하지 않는다.\n주로 Local 환경에서 개발하고, 완료되면 Staging 서버에서 테스트 한 뒤, 통과하면 그때서야 Production 서버에 배포한다.")]),_._v(" "),e("p",[_._v("그런데 개발을 진행한 Local 환경과 Production "),e("strong",[_._v("서버 환경")]),_._v("이 다른 경우가 있다. (ex. Window vs. Linux)\n예시처럼 OS 가 다르기 때문에 설치 시에도 다르게 진행해야 한다.\n이외에도 Local 의 "),e("strong",[_._v("환경 변수")]),_._v("와 Production 서버의 환경 변수가 다르거나, "),e("strong",[_._v("Permission")]),_._v(" 이 달라 작동하지 않는 경우가 있다.")]),_._v(" "),e("p",[_._v("그래서 이러한 문제를 해결하고자 README 에 설정들을 기록하고, 이대로 실행해달라고 한다.\n하지만 매번 이런 작업을 하는 과정이 귀찮다. (운영하는 서버가 수백대라면..?)")]),_._v(" "),e("p",[_._v("서버 환경 설정까지도 모두 한 번에 소프트웨어화 할 수 없을까 해서 나온 개념이 "),e("strong",[_._v("가상화")]),_._v("이다 (엄밀하게는 하드웨어 가상화 등 더 넓은 개념이다).\n특정 소프트웨어 환경을 만들고, Local, Production 서버에서 그대로 활용할 수 있도록 한다. 이를 통해,")]),_._v(" "),e("ul",[e("li",[_._v("개발과 운영 서버의 "),e("strong",[_._v("환경 불일치가 해소")]),_._v("되고,")]),_._v(" "),e("li",[_._v("어느 환경에서나 동일한 환경으로 프로그램을 실행할 수 있고,")]),_._v(" "),e("li",[_._v("개발 외에 Research 도 동일한 환경을 사용할 수 있다.")])]),_._v(" "),e("br"),_._v(" "),e("p",[e("strong",[_._v("Docker")]),_._v(" 가 등장하기 전에는, 가상화 기술로 주로 VM( Virtual Machine ) 을 사용하였다.\nVM 은 호스트 머신이라고 하는 실제 물리적인 컴퓨터 위에, "),e("strong",[_._v("OS 를 포함")]),_._v("한 가상화 소프트웨어를 두는 방식으로 설계되었다.\nGCP 의 Compute Engine 혹은 AWS EC2 가 이런 개념을 활용하였다 (미리 만든 이미지를 바탕으로 Computing 서비스를 통해 동일한 컴퓨팅 환경을 제공하였다).")]),_._v(" "),e("p",[_._v("하지만 이 방식은 OS 위에 OS 를 하나 더 실행시키기 때문에, 굉장히 "),e("strong",[_._v("리소스를 잡아먹는다")]),_._v(".\n그래서 VM 의 무거움을 크게 덜어주면서, 가상화를 좀 더 경량화된 "),e("strong",[_._v("프로세스의 개념")]),_._v("으로 만든 "),e("strong",[_._v("Container")]),_._v(" 기술이 나왔다.\n이 Container 기술을 쉽게 사용할 수 있도록 나온 도구가 바로 "),e("span",{staticStyle:{color:"#2454ff"}},[e("strong",[_._v("Docker")])]),_._v(" 이다.")]),_._v(" "),e("p",[_._v("2013 년에 오픈소스로 등장하였고, "),e("span",{staticStyle:{color:"#2454ff"}},[e("strong",[_._v("Container 에 기반한 개발과 운영을 매우 빠르게 확장할 수 있다는 장점")])]),_._v("이 있다.")]),_._v(" "),e("br"),_._v(" "),e("ul",[e("li",[e("p",[e("strong",[_._v("Docker Image")]),_._v("   ➜   컨테이너를 실행할 때 사용할 수 있는 일종의 템플릿이다. (Read Only)")])]),_._v(" "),e("li",[e("p",[e("strong",[_._v("Docker Container")]),_._v("   ➜   Doceker Image 를 활용해 실행된 인스턴스로, Write 이 가능하다.")])])]),_._v(" "),e("br"),_._v(" "),e("p",[_._v("다른 사람이 만든 Docker Image 를 가져와서, OS 구분없이 어디에서나 동일하게 실행할 수 있다.\n물론 자신만의 Image 를 만들수도 있고, 공유할 수도 있다.\n생성한 Image 를 원격 저장소에 저장하면 어디서나 사용할 수 있는데, 여기서 원격 저장소는 "),e("strong",[_._v("Container Registry")]),_._v(" 로,\n회사에서 서비스를 배포할 때는 원격 저장소에 이미지를 업로드하고, 서버에서 받아서 실행하는 식으로 진행한다.")]),_._v(" "),e("ul",[e("li",[e("strong",[_._v("dockerhub")]),_._v(", "),e("strong",[_._v("GCR")]),_._v(", "),e("strong",[_._v("ECR")]),_._v(", ...")])]),_._v(" "),e("br"),_._v(" "),e("p",[e("strong",[_._v("Docker 사용법")])]),_._v(" "),e("p",[_._v("목표 - MySQL 실행하기")]),_._v(" "),e("ol",[e("li",[e("p",[_._v("이미지 가져오기 (mysql 8 버전의 이미지를 다운)   ➜   "),e("code",[_._v('docker pull "이미지_이름:태그"')])]),_._v(" "),e("ul",[e("li",[e("code",[_._v("docker pull mysql:8")])])])]),_._v(" "),e("li",[e("p",[_._v("다운받은 이미지 확인   ➜   "),e("code",[_._v("docker images")])])]),_._v(" "),e("li",[e("p",[_._v("다운받은 이미지 기반으로 컨테이서 실행   ➜   "),e("code",[_._v('docker run "이미지_이름:태그"')])]),_._v(" "),e("ul",[e("li",[_._v("`docker run --name mysql-tutorial -e MYSQL_ROOT_PASSWORD=1234 -d -p 3306:3306 mysql:8\n"),e("ul",[e("li",[_._v("mysql:8 버전을 3306 포트에서 데몬 방식(백그라운드)으로 mysql-tutorial 이란 이름으로 컨테이너를 생성하고 실행하는데, root 비밀번호는 1234 이다.")])])]),_._v(" "),e("li",[e("code",[_._v("-e")]),_._v("   ➜   환경변수 설정")]),_._v(" "),e("li",[e("code",[_._v("-d")]),_._v("   ➜   데몬 모드(백그라운드). 이 설정을 하지 않으면, 현재 실행하는 쉘 위에서 컨테이너가 실행된다 (컨테이너를 나가면 실행이 종료된다).")]),_._v(" "),e("li",[e("code",[_._v("-p")]),_._v("   ➜   포트를 지정한다. ("),e("strong",[_._v("로컬 호스트 포트:컨테이너 포트")]),_._v(") 형태로, 해당 포트를 통해 통신한다.")])])]),_._v(" "),e("li",[e("p",[e("strong",[_._v("실행중인")]),_._v(" 컨테이너 확인   ➜   "),e("code",[_._v("docker ps")])]),_._v(" "),e("ul",[e("li",[_._v("작동이 멈춘 컨테이너는 "),e("code",[_._v("docker ps -a")]),_._v(" 명령어로 확인할 수 있다.")])])]),_._v(" "),e("li",[e("p",[_._v("백그라운드에서 실행 중인 컨테이너에 접속   ➜   "),e("code",[_._v('docker exec -it "컨테이너_이름(혹은 ID)" /bin/bash')])]),_._v(" "),e("ul",[e("li",[_._v("Compute Engine 에서 SSH 로 접속하는 것과 유사하다.")])])]),_._v(" "),e("li",[e("p",[_._v("컨테이서 속 MYSQL 프로세스 들어가기   ➜   "),e("code",[_._v("mysql -u root -p")])])]),_._v(" "),e("li",[e("p",[_._v("필요없는, "),e("strong",[_._v("멈춘")]),_._v(" 컨테이너 삭제   ➜   "),e("code",[_._v('docker rm "컨테이너_이름(ID)"')])]),_._v(" "),e("ul",[e("li",[_._v("실행중인 컨테이너를 삭제하려면 "),e("code",[_._v('docker rm "컨테이너_이름(ID)" -f')]),_._v(" 로 "),e("code",[_._v("-f")]),_._v(" 옵션을 주면 되지만, 권장하지 않는다.")])])])]),_._v(" "),e("br"),_._v(" "),e("p",[e("strong",[_._v("Tip")])]),_._v(" "),e("p",[e("code",[_._v("docker run")]),_._v(" 할 때 파일을 공유하는 방법")]),_._v(" "),e("ul",[e("li",[e("strong",[_._v("Volume Mount")]),_._v(" "),e("ul",[e("li",[_._v("Docker Container 내부는 특별한 설정이 없으면 "),e("strong",[_._v("컨테이너를 삭제할 때 파일이 사라진다")]),_._v(". 파일을 유지하려면 Host 와 Container 의 "),e("strong",[_._v("저장소를 공유")]),_._v("해야 한다.")]),_._v(" "),e("li",[_._v("Volumne Mount 를 진행하면 Host 와 Container 의 폴더가 공유된다.")]),_._v(" "),e("li",[e("code",[_._v("-v")]),_._v(" 옵션을 사용하며, "),e("code",[_._v("-p")]),_._v(" 처럼 사용한다.   ➜   "),e("code",[_._v("-v host_folder:container_folder")])]),_._v(" "),e("li",[_._v("ex) "),e("code",[_._v("docker run -it -p 8888:8888 -v /some/host/folder:/home/username/workspace")])])])])]),_._v(" "),e("br"),_._v(" "),e("p",[e("strong",[_._v("Docker Image 만들기")])]),_._v(" "),e("p",[_._v("직접 Docker Image 를 만들어보자. 목표는 FastAPI 를 실행하는 서버 이미지이다.")]),_._v(" "),e("ol",[e("li",[e("p",[_._v("먼저 폴더를 하나 만들고, 가상환경 세팅 후에 FastAPI 패키지를 설치한다.")]),_._v(" "),e("ol",[e("li",[e("code",[_._v("mkdir fastAPI_Image && cd fastAPI_Image")])]),_._v(" "),e("li",[e("code",[_._v("python -m venv venv && source venv/bin/activate")])]),_._v(" "),e("li",[e("code",[_._v("pip install pip --upgrade")])]),_._v(" "),e("li",[e("code",[_._v('pip install "fastapi[all]"')])])])]),_._v(" "),e("li",[e("p",[_._v("GET /hello 로 요청하면, 메시지를 전달하는 간단한 코드 작성")])])]),_._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[_._v("# main.py")]),_._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("from")]),_._v(" fastapi "),e("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("import")]),_._v(" FastAPI\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("import")]),_._v(" uvicorn\n\napp "),e("span",{pre:!0,attrs:{class:"token operator"}},[_._v("=")]),_._v(" FastAPI"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(")")]),_._v("\n\n"),e("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[_._v("@app"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(".")]),_._v("get")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[_._v("'/hello'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(")")]),_._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("def")]),_._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[_._v("hello")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(":")]),_._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("return")]),_._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("{")]),_._v("\n        "),e("span",{pre:!0,attrs:{class:"token string"}},[_._v("'message'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(":")]),_._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[_._v("'world!'")]),_._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("}")]),_._v("\n\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("if")]),_._v(" __name__ "),e("span",{pre:!0,attrs:{class:"token operator"}},[_._v("==")]),_._v(" '__main__"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(":")]),_._v("\n    uvicorn"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(".")]),_._v("run"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("(")]),_._v("app"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(",")]),_._v(" host"),e("span",{pre:!0,attrs:{class:"token operator"}},[_._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[_._v("'0.0.0.0'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(",")]),_._v(" port"),e("span",{pre:!0,attrs:{class:"token operator"}},[_._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[_._v("8000")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(")")]),_._v("\n")])])]),e("ol",{attrs:{start:"3"}},[e("li",[e("p",[_._v("설치한 라이브러리를 따로 관리   ➜   "),e("code",[_._v("pip freeze > requirements.txt")])]),_._v(" "),e("ul",[e("li",[_._v("의존성에 따라 설치된 라이브러리는 보이지 않게 하기   ➜   "),e("code",[_._v("pip list --not-required --format=freeze > requirements.txt")])])])]),_._v(" "),e("li",[e("p",[e("span",{staticStyle:{color:"#2454ff"}},[e("strong",[_._v("Dockerfile")])]),_._v(" 라는 파일을 만들어 다음처럼 작성한다. (Docker Image 를 빌드하기 위한 정보가 담김)")])])]),_._v(" "),e("div",{staticClass:"language-dockerfile extra-class"},[e("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[e("code",[e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("FROM")]),_._v(" python:3.8.7-slim-buster")]),_._v("\n\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("COPY")]),_._v(" . /app")]),_._v("\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("WORKDIR")]),_._v(" /app")]),_._v("\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("ENV")]),_._v(" PYTHONPATH=/app")]),_._v("\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("ENV")]),_._v(" PYTHONBUFFERED=1")]),_._v("\n\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("RUN")]),_._v(" pip install pip==21.2.4 && "),e("span",{pre:!0,attrs:{class:"token operator"}},[_._v("\\")]),_._v("\n    pip install -r requirements.txt")]),_._v("\n\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("CMD")]),_._v(" ["),e("span",{pre:!0,attrs:{class:"token string"}},[_._v('"python"')]),_._v(", "),e("span",{pre:!0,attrs:{class:"token string"}},[_._v('"main.py"')]),_._v("]")]),_._v("\n")])])]),e("ul",[e("li",[_._v("Dockerhub 속 python:3.8.7-slim-buster 이미지를 바탕으로 작업 실행한 후 빌드")]),_._v(" "),e("li",[e("code",[_._v("COPY")]),_._v(" 는 Dockerfile 이 존재하는 경로 기준 로컬 디렉토리를 컨테이너 내부의 디렉토리로 복사\n"),e("ul",[e("li",[_._v("파일을 컨테이너에서 사용하려면 COPY 명령어로 반드시 복사해야 함")])])]),_._v(" "),e("li",[e("code",[_._v("WORKDIR")]),_._v(" 는 RUN, CMD, ENTRYPOINT 등의 명령어를 실행할 컨테이너 경로를 지정하는 것을 말한다.\n"),e("ul",[e("li",[_._v("지정 후 명령어들은 컨테이너 내부의 "),e("code",[_._v("/app")]),_._v(" 에서 실행한다.")])])]),_._v(" "),e("li",[e("code",[_._v("ENV")]),_._v(" 는 컨테이너 내 환경변수를 지정하는 것으로써, "),e("code",[_._v("ENV 환경변수_이름=값")]),_._v(" 방식으로 사용한다.\n"),e("ul",[e("li",[_._v("파이썬 애플리케이션의 경우 통상 위 두 값을 지정한다.")])])]),_._v(" "),e("li",[e("code",[_._v("CMD")]),_._v(" 는 docker run 으로 이미지 기반 컨테이너를 만들 때, "),e("strong",[_._v("실행할 명령어")]),_._v("이다.\n"),e("ul",[e("li",[_._v("위의 이미지는 실행되는 즉시 "),e("code",[_._v("python main.py")]),_._v(" 를 실행하며, CMD 는 "),e("strong",[_._v("띄어쓰기를 사용하지 않는다")]),_._v(".")])])])]),_._v(" "),e("ol",{attrs:{start:"5"}},[e("li",[e("p",[_._v("Docker Image Build   ➜   "),e("code",[_._v("docker build dockerfile_경로")])]),_._v(" "),e("ul",[e("li",[e("code",[_._v("-t 이미지_이름:태그")]),_._v(" 옵션으로 이미지 이름과 태그를 지정할 수 있다.")]),_._v(" "),e("li",[_._v("태그 미지정시 "),e("strong",[_._v("latest")]),_._v(" 로 채워짐")])])]),_._v(" "),e("li",[e("p",[_._v("빌드가 완료되면, "),e("code",[_._v("docker images")]),_._v(" 명령어로 빌드한 이미지를 확인할 수 있다.")])]),_._v(" "),e("li",[e("p",[_._v("빌드한 이미지 실행   ➜   "),e("code",[_._v("docker run 이미지_이름:태그")])]),_._v(" "),e("ul",[e("li",[_._v("ex) "),e("code",[_._v("docker run -p 8000:8000 fastAPI-app")])]),_._v(" "),e("li",[_._v("태그가 latest 라면 생략 가능하다.")])])]),_._v(" "),e("li",[e("p",[e("code",[_._v("curl")]),_._v(" 을 통해 애플리케이션이 작동하는지 테스트 할 수 있다.")]),_._v(" "),e("ul",[e("li",[_._v("ex) "),e("code",[_._v("curl localhost:8000/hello")])])])])]),_._v(" "),e("br"),_._v(" "),e("p",[e("strong",[_._v("그 외에 Dockerfile 에서 사용하는 것")])]),_._v(" "),e("ul",[e("li",[e("code",[_._v("EXPOSE")]),_._v("   ➜   컨테이너 외부에 노출할 포트 지정")]),_._v(" "),e("li",[e("code",[_._v("ENTRYPOINT")]),_._v("   ➜   이미지를 컨테이너로 띄울 때 항상 실행하는 커맨드")])]),_._v(" "),e("br"),_._v(" "),e("br")])}),[],!1,null,"45ca2890",null);v.default=o.exports}}]);