(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{385:function(t,s,a){},442:function(t,s,a){"use strict";a(385)},517:function(t,s,a){"use strict";a.r(s);a(442);var n=a(33),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h3",{attrs:{id:"_2022-02-03-새로-알게된-점"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2022-02-03-새로-알게된-점"}},[t._v("#")]),t._v(" 2022/02/03, 새로 알게된 점")]),t._v(" "),a("p",{staticClass:"tags"},[t._v("#matplotlib #bar_plot #line_plot #scatter_plot")]),t._v(" "),a("p",[t._v("  시각화하는 방법에 배우기에 앞서 기본적인 개념을 알아야 한다.")]),t._v(" "),a("h4",{attrs:{id:"데이터셋의-종류"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#데이터셋의-종류"}},[t._v("#")]),t._v(" 데이터셋의 종류")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("정형 데이터")]),t._v("   ➜   tabular 데이터에 적합하다. 시각화에 가장 쉬운 데이터 종류이며, 주로 통계적 특성 및 feature 사이 관계를 알아본다.")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("시계열 데이터")]),t._v("   ➜   정형 데이터와 비정형 데이터 모두 존재하며, 주로 "),a("strong",[t._v("추세")]),t._v(", "),a("strong",[t._v("계절성")]),t._v(", "),a("strong",[t._v("주기성")]),t._v(" 등을 살핀다.")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("지리/지도 데이터")]),t._v("   ➜   지도 정보와 원하는 정보간의 "),a("strong",[t._v("조화")]),t._v("가 중요하다.")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("관계형(네트워크) 데이터")]),t._v("   ➜   관계를 시각화하는 방식으로, 주로 객체를 "),a("strong",[t._v("Node")]),t._v(", 그리고 관계를 "),a("strong",[t._v("Link")]),t._v(" 로 나타낸다.")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("계층적 데이터")]),t._v("   ➜   관계 중에서도 "),a("strong",[t._v("포함관계")]),t._v("가 분명한 데이터이다. (Tree, Treemap, Sunburst)")])])]),t._v(" "),a("br"),t._v(" "),a("h4",{attrs:{id:"데이터의-종류"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#데이터의-종류"}},[t._v("#")]),t._v(" 데이터의 종류")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("수치형 ( 연속형 vs. 이산형 )")])]),t._v(" "),a("li",[a("p",[t._v("범주형 ( 명목형 vs. 순서형 )")])])]),t._v(" "),a("br"),t._v(" "),a("h4",{attrs:{id:"전주의적-속성"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#전주의적-속성"}},[t._v("#")]),t._v(" 전주의적 속성")]),t._v(" "),a("p",[t._v("  Pre-attentive Attribute 로, "),a("strong",[t._v("주의를 주지 않아도 인지하게 되는 요소")]),t._v("이다. 회색 점들로 가득찬 공간에 빨간 점 하나가 눈에 잘 보이듯이,\n적절하게 이러한 속성을 이용하면 시각적 분리에 유리하다. (언급한 것처럼 색채/색조 대비 방식을 자주 사용한다.)")]),t._v(" "),a("br"),t._v(" "),a("h4",{attrs:{id:"matplotlib"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#matplotlib"}},[t._v("#")]),t._v(" Matplotlib")]),t._v(" "),a("p",[t._v("  이제 python 의 대표적인 시각화 라이브러리인 "),a("span",{staticStyle:{color:"#2454ff"}},[a("strong",[t._v("Matplotlib")])]),t._v(" 에 대해서 학습하였다.\n주로 "),a("code",[t._v("import matplotlib.pyplot as plt")]),t._v(" 방식으로 라이브러리를 불러와 사용한다. 사용방식은 "),a("span",{staticStyle:{color:"#2454ff"}},[a("strong",[t._v("Figure")])]),t._v(" 라는\n큰 도화지에 "),a("span",{staticStyle:{color:"#2454ff"}},[a("strong",[t._v("Ax")])]),t._v(" 라는 subplot 을 1개 이상 추가하며 그려낸다. Ax 에는 여러개의 그래프를 동시에 그릴 수 있다.")]),t._v(" "),a("p",[t._v("  추가하는 방식도 여러가지가 있지만, 주로 "),a("code",[t._v(".add_subplot(index)")]),t._v(" 방식으로 위치를 지정하며 추가하는 방식을 사용한다.")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("fig "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" plt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("figure"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nax1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fig"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("add_subplot"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ■ □")]),t._v("\nax2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fig"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("add_subplot"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# □ ■")]),t._v("\n\nplt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("show"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("fig "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" plt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("figure"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ■")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# □")]),t._v("\nax1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fig"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("add_subplot"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# □")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ■")]),t._v("\nax2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fig"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("add_subplot"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nplt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("show"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[a("code",[t._v(".add_subplot(121)")]),t._v(" 같은 방식도 가능하지만, 추후 수십 수백개의 features 에 대해서 for 문으로 Ax 를 추가하려면 먼저 언급한 방식이 편리하다.")]),t._v(" "),a("br"),t._v(" "),a("h4",{attrs:{id:"기본적인-파라미터와-함수"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#기본적인-파라미터와-함수"}},[t._v("#")]),t._v(" 기본적인 파라미터와 함수")]),t._v(" "),a("p",[t._v("  기본적인 속성에 대해 알아보자.")]),t._v(" "),a("ol",[a("li",[a("p",[a("code",[t._v("label")]),t._v(" parameter"),a("br"),t._v("\n한 "),a("strong",[t._v("Ax")]),t._v(" 에 "),a("code",[t._v("label='string'")]),t._v(" 속성을 추가하면, 나중에 "),a("code",[t._v("legend()")]),t._v(" 로 해당 string 으로 범례를 보여줄 수 있다.")])]),t._v(" "),a("li",[a("p",[a("code",[t._v(".set_title('string')")]),a("br"),t._v("\n한 Ax 에 대해 가장 큰 제목을 추가한다. 반대로 해당 제목 데이터를 얻으려면 "),a("code",[t._v(".get_title()")]),t._v(" 을 사용하면 된다.")])]),t._v(" "),a("li",[a("p",[a("code",[t._v(".set_xticks([1, 2, ...])")]),a("br"),t._v("\n한 Ax 에 대해 X 축의 범위를 정의한다. 빈 리스트로 입력하면 눈금이 사라진다.")])]),t._v(" "),a("li",[a("p",[a("code",[t._v(".set_xticklabels(['zero', 'one', ...])")]),a("br"),t._v("\n한 Ax 에 대해 X 축 눈금의 "),a("strong",[t._v("Text")]),t._v(" 를 어떻게 표현하는지 정의한다.")])]),t._v(" "),a("li",[a("p",[a("code",[t._v(".annotate(text='sentence', xy=(1, 2))")]),t._v("   or   "),a("code",[t._v(".annotate(text='sentence', xy=(1, 2), arrowprops=dict(facecolor='black'))")]),a("br"),t._v("\n한 Ax 에 대해 Text 를 지정한 위치에 그린다. 주로 "),a("strong",[t._v("화살표")]),t._v("와 같이 "),a("strong",[t._v("특정 데이터를 설명하는데 사용")]),t._v("한다.")])])]),t._v(" "),a("br"),t._v(" "),a("h4",{attrs:{id:"bar-plot"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bar-plot"}},[t._v("#")]),t._v(" Bar Plot")]),t._v(" "),a("p",[t._v("  직사각형 막대를 사용하여 데이터의 값을 표현하는 차트/그래프로, "),a("span",{staticStyle:{color:"#2454ff"}},[a("strong",[t._v("범주")])]),t._v(" (category)에 따른\n값을 비교하기에 적합하다. 막대가 수직 ➜ "),a("code",[t._v(".bar()")]),t._v("   /   막대가 수평 ➜ "),a("code",[t._v(".barh()")]),t._v(" 방식을 사용한다. barplot에도 여러 방식이 존재한다.\n동일한 Ax 에 "),a("code",[t._v(".bar()")]),t._v(" 를 누적하여 그리는 "),a("span",{staticStyle:{color:"#2454ff"}},[a("strong",[t._v("stack")])]),t._v(" 방식, 직사각형 속 비율로 표시하는\n"),a("span",{staticStyle:{color:"#2454ff"}},[a("strong",[t._v("percentage")])]),t._v(" 방식(text로 수치를 나타내면 더욱 좋다.),\nstack 처럼 누적해서 그리지만 "),a("code",[t._v("alpha=0.7")]),t._v(" 처럼 투명도를 조절하여 동시에 보여주는 "),a("span",{staticStyle:{color:"#2454ff"}},[a("strong",[t._v("overlaped")])]),t._v(" 방식, 그리고\n한 tick에 겹치지 않고 연달아 보여주는 "),a("span",{staticStyle:{color:"#2454ff"}},[a("strong",[t._v("grouped")])]),t._v(" 방식이 있다. 이 모두 "),a("strong",[t._v("seaborn")]),t._v(" 을 이용하면 간편하게 구현할 수 있다.")]),t._v(" "),a("p",[t._v("  Bar Plot 에서 권장 사항이 존재한다. "),a("u",[t._v("X 축의 시작은 반드시 0이어야 한다는 점")]),t._v("과 잉크 양 비례 법칙에 따라 "),a("u",[t._v("큰 값의 데이터는 더 많이 표현")]),t._v("해야 한다.\n그리고 정렬은 필수적이며, 정렬 방식은 시계열은 시간순으로, 수치형은 크기순으로, 순서형은 범주의 순서대로, 그리고 명목형은 범주의 값에 따라 정렬한다.")]),t._v(" "),a("br"),t._v(" "),a("h4",{attrs:{id:"line-plot"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#line-plot"}},[t._v("#")]),t._v(" Line Plot")]),t._v(" "),a("p",[t._v("  꺾은선 그래프라고도 불리는 Line Plot 은 "),a("span",{staticStyle:{color:"#2454ff"}},[a("strong",[t._v("시간/순서에 대한 변화")])]),t._v("에 적합하며, 추세를 살펴보기 위해 사용한다.\n이름과는 다르게 "),a("code",[t._v(".plot()")]),t._v(" 으로 그래프를 그린다. 그리고 가독성을 높이기 위해 한 Ax 에 사용되는 "),a("strong",[t._v("선은 5개 이하로 제한")]),t._v("한다.")]),t._v(" "),a("br"),t._v(" "),a("h4",{attrs:{id:"scatter-plot"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#scatter-plot"}},[t._v("#")]),t._v(" Scatter Plot")]),t._v(" "),a("p",[t._v("  이론상 5차원까지 표현 가능(color, marker, size)한 Scatter Plot 은 "),a("span",{staticStyle:{color:"#2454ff"}},[a("strong",[t._v("상관 관계")])]),t._v("을 확인하기 위해 사용한다.\n다만, "),a("span",{staticStyle:{color:"#2454ff"}},[a("u",[a("strong",[t._v("상관관계를 가진다고 해서 인과관계에 있는 것은 아니라는 점")])])]),t._v("이다. Scatter Plot 을 통해\n"),a("strong",[t._v("군집")]),t._v(", "),a("strong",[t._v("값 사이의 차이")]),t._v(", 그리고 "),a("strong",[t._v("이상치")]),t._v("를 파악한다.")]),t._v(" "),a("br"),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"피어-세션"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#피어-세션"}},[t._v("#")]),t._v(" 피어 세션")]),t._v(" "),a("p",[t._v("Colab 과 같은 무료 컴퓨팅 자원으로 AINIZE 서비스는 어떨까..?")]),t._v(" "),a("br"),t._v(" "),a("br"),t._v(" "),a("br")])}),[],!1,null,"59c95042",null);s.default=r.exports}}]);